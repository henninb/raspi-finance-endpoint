import nu.studer.gradle.jooq.JooqEdition

buildscript {
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'scala'
    // id 'maven'
    id 'java-library'
    id 'jacoco'
    // id 'codenarc'
    id 'nu.studer.jooq' version "${jooqPluginVersion}"
    id "org.springframework.boot" version "${springBootVersion}"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.flywaydb.flyway" version "${flywayVersion}"
    id "com.github.ben-manes.versions" version "${gradleVersionsPlugin}"
}

apply from: 'test.gradle'

repositories {
    mavenCentral()
//    maven {
//        url "https://www.oracle.com/content/secure/maven/content"
//        credentials {
//            username ""
//            password ""
//        }
//    }

    //maven {url "https://maven.xwiki.org/externals/"}
    google()
//    flatDir {
//        dirs "libs"
//    }

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
      if ( it.requested.group == 'org.apache.logging.log4j') {
        it.useVersion "${apacheLoggingVersion}"
      }
    }
}

// codenarc {
    // toolVersion = "$codenarcPluginVersion"
// }

// Use toolchains for Gradle 9 compatibility
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Configure Kotlin toolchain instead of per-task compatibility
kotlin {
    jvmToolchain(21)
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

wrapper {
    gradleVersion = "${gradleVersion}"
}

dependencies {
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    //Groovy
    //implementation("org.codehaus.groovy:groovy-all:${groovyVersion}")
    implementation("org.apache.groovy:groovy:${groovyVersion}")

    //Scala
    implementation("org.scala-lang:scala-library:${scalaVersion}")

    // Codenarc
    // implementation("org.codenarc:CodeNarc:${codenarcPluginVersion}")

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    //Added on 2020-12-01
    implementation("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

    //Jackson
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    implementation("com.google.code.gson:gson:${gsonVersion}")

    //Camel
    implementation("org.apache.camel.springboot:camel-spring-boot-starter:${apacheCamelVersion}")
    implementation("org.apache.camel:camel-core:${apacheCamelVersion}")

    //graphql
//    implementation("com.graphql-java:graphql-java-extended-scalars:${graphqlVersion}")
//    implementation("com.graphql-java:graphql-java:${graphqlVersion}")
//    implementation("com.graphql-java:graphql-java-spring-boot-starter-webmvc:${graphqlSpringWebmvcVersion}")
//    implementation "com.google.guava:guava:31.1-jre"

    //postgreSQL database
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")

    // jooq
    implementation("org.jooq:jooq:${jooqVersion}")
    jooqGenerator "org.postgresql:postgresql:${postgresqlVersion}"

    // Oracle database
    runtimeOnly fileTree(dir: 'libs', include: 'ojdbc8.jar')
    //runtimeOnly("com.oracle.jdbc:ojdbc8:${oracleVersion}")
    implementation("org.apache.tomcat:tomcat-jdbc:${tomcatJdbcVersion}")

    //Flyway
    implementation("org.flywaydb:flyway-core:${flywayVersion}")
    implementation("org.flywaydb:flyway-database-postgresql:${flywayVersion}")


    //influx
    implementation("io.micrometer:micrometer-registry-influx:${micrometerInfluxVersion}")

    //Resilience4j for circuit breaker, retry, and timeout patterns
    implementation("io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-retry:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}")

    //Validation
    implementation("javax.validation:validation-api:${validationVersion}")
    //implementation "org.hibernate:hibernate-validator-annotation-processor:${hibernateVersion}"

    //logstash
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")

    //Used for transactional
    // implementation("org.aspectj:aspectjweaver:1.9.6")

    // added 7/16/2021
    //Security
    //implementation("org.springframework.security:spring-security-core:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-web:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-config:${springSecurityVersion}")
    implementation 'io.jsonwebtoken:jjwt-api:0.12.7'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.7'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.7'
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.1"

    //
    //Graphics
    implementation("net.coobird:thumbnailator:${thumbnailatorVersion}")

    //Hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    //implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}")  //spring boot 2.x
    //implementation("jakarta.persistence:jakarta.persistence-api:3.1.0") //spring boot 3.x

    //Jakarta
    compileOnly("jakarta.platform:jakarta.jakartaee-api:${jakartaVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
    //implementation 'org.slf4j:slf4j-log4j12:2.0.0'

    //implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '2.0.1'
    //implementation group: 'org.slf4j', name: 'log4j-over-slf4j', version: '2.0.1'

//    implementation 'org.slf4j:slf4j-api:2.0.0'
//    implementation 'org.slf4j:slf4j-simple:2.0.0'

    implementation("org.apache.logging.log4j:log4j-core:${apacheLoggingVersion}")

}

//tasks.withType(bootRun) {
//    options.encoding = 'UTF-8'
//}

// tasks.withType(CodeNarc).configureEach {
    // configFile = rootProject.file 'config/codenarc/codenarcMain.groovy'
    // ignoreFailures = true
// }


jooq {
    version = "${jooqVersion}"  // the default (can be omitted)
    edition = JooqEdition.OSS  // the default (can be omitted)
}

//jooq {
//    version = '3.15.0'  // the default (can be omitted)
//    edition = JooqEdition.OSS  // the default (can be omitted)
//
//    configurations {
//        main {  // name of the jOOQ configuration
//            generateSchemaSourceOnCompilation = true  // default (can be omitted)
//
//            generationTool {
//                jdbc {
//                    driver = 'org.postgresql.Driver'
//                    url = 'jdbc:postgresql://localhost:5432/finance_test_db'
//                    user = 'henninb'
//                    password = 'monday1'
//                }
//                generator {
//                    name = 'org.jooq.codegen.DefaultGenerator'
//                    database {
//                        name = 'org.jooq.meta.postgres.PostgresDatabase'
//                        inputSchema = 'public'
////                        forcedTypes {
////                            forcedType {
////                                name = 'varchar'
////                                includeExpression = '.*'
////                                includeTypes = 'JSONB?'
////                            }
////                            forcedType {
////                                name = 'varchar'
////                                includeExpression = '.*'
////                                includeTypes = 'INET'
////                            }
////                        }
//                    }
//                    generate {
//                        deprecated = false
//                        records = true
//                        immutablePojos = true
//                        fluentSetters = true
//                    }
////                    target {
////                        packageName = 'nu.studer.sample'
////                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
////                    }
//                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//                }
//            }
//        }
//    }
//
//}

//jooq {
//    version.set("3.14.7")  // default (can be omitted)
//    edition.set(nu.studer.gradle.jooq.JooqEdition.OSS)  // default (can be omitted)
//
//    configurations {
//        create("main") {  // name of the jOOQ configuration
//            generateSchemaSourceOnCompilation.set(false)  // default (can be omitted)
//
//            jooqConfiguration.apply {
//                logging = org.jooq.meta.jaxb.Logging.WARN
//                jdbc.apply {
//                    driver = "org.postgresql.Driver"
//                    url = "jdbc:postgresql://localhost:5432/finance_db"
//                    user = "henninb"
//                    password = "monday1"
//                }
//                generator.apply {
//                    name = "org.jooq.codegen.DefaultGenerator"
//
//                    database.apply {
//                        name = "org.jooq.meta.postgres.PostgresDatabase"
//                        inputSchema = "public"
//                        includes = "goods"
//                        excludes = ""
//                    }
//
//                    generate.apply {
//                        isRelations = true
//                        isDeprecated = false
//                        isRecords = true
//                        isImmutablePojos = true
//                        isFluentSetters = true
//                    }
//                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
//                }
//            }
//        }
//    }
//}

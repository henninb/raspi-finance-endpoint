import nu.studer.gradle.jooq.JooqEdition

buildscript {
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'java-library'
    id 'jacoco'
    id 'codenarc'
    id 'nu.studer.jooq' version "${jooqPluginVersion}"
    id "org.springframework.boot" version "${springBootVersion}"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    // Open Spring-annotated Kotlin classes (e.g., @Service) so Spock can mock them
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.flywaydb.flyway" version "${flywayVersion}"
    id "com.github.ben-manes.versions" version "${gradleVersionsPluginVersion}"
    // Kotlin linter/formatter
    id "org.jlleitschuh.gradle.ktlint" version "13.1.0"
}

apply from: 'test.gradle'

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
    sourceSets sourceSets.main
}

repositories {
    mavenCentral()

    google()

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if ( details.requested.group == 'org.apache.logging.log4j') {
        details.useVersion "${apacheLoggingVersion}"
      }
    }
}

// CodeNarc configuration (analyzes Groovy sources; ignore failures to keep build green initially)
codenarc {
    toolVersion = "${codenarcVersion}"
}

tasks.withType(org.gradle.api.plugins.quality.CodeNarc).configureEach {
    configFile = rootProject.file('config/codenarc/ruleset.groovy')
    ignoreFailures = true
    reports {
        xml.required = true
        html.required = true
    }
}

// Apply stricter rules only for main sources
tasks.named('codenarcMain') {
    configFile = rootProject.file('config/codenarc/ruleset-main.groovy')
}

// Add a ratchet task that fails only on a narrow set of rules for main
tasks.register('codenarcMainRatchet', org.gradle.api.plugins.quality.CodeNarc) {
    description = 'Ratchet: fail main on critical rules only'
    group = 'verification'
    configFile = rootProject.file('config/codenarc/ruleset-ratchet.groovy')
    source = sourceSets.main.groovy
    // Fail the build on these violations
    ignoreFailures = false
    reports {
        xml.required = true
        html.required = true
    }
}

// Wire ratchet into the lifecycle so CI fails only on the narrow ruleset
tasks.named('check') { dependsOn 'codenarcMainRatchet' }

// The CodeNarc plugin automatically creates tasks for each Groovy source set
// (including custom ones from test.gradle) and wires them into 'check'.

// KtLint configuration: enforce rules for main sources
ktlint {
    version.set("1.7.1")
    // Fail the build on style violations now that codebase is cleaned
    ignoreFailures.set(false)
}

// Use toolchains for Gradle 9 compatibility
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Configure Kotlin toolchain instead of per-task compatibility
kotlin {
    jvmToolchain(21)

    // Gradle 9 preparation: explicit compilation configurations
    compilerOptions {
        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21)
    }
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

wrapper {
    gradleVersion = "${gradleVersion}"
}

// Configure bootRun to pass environment variables from shell
bootRun {
    // Pass all environment variables to the Spring Boot application
    doFirst {
        System.getenv().each { key, value ->
            environment key, value
        }
    }
}

dependencies {
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonCoreVersion}")

    //Groovy
    implementation("org.apache.groovy:groovy:${groovyVersion}")


    // CodeNarc is applied via Gradle plugin; no direct dependency needed

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-graphql:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

    // Spring Boot 4.0 test dependencies
    // moved to test.gradle to centralize test deps
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    //Added on 2020-12-01
    implementation("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

    //Jackson
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationsVersion}")


    // GraphQL (Spring for GraphQL)
    implementation("com.graphql-java:graphql-java-extended-scalars:${graphqlExtendedScalarsVersion}")
    implementation "com.google.guava:guava:${guavaVersion}"

    // SpringDoc OpenAPI (Swagger)
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}")

    //postgreSQL database
    runtimeOnly("org.postgresql:postgresql:${postgresqlDriverVersion}")

    // jooq
    implementation("org.jooq:jooq:${jooqVersion}")
    jooqGenerator "org.postgresql:postgresql:${postgresqlDriverVersion}"

    // Oracle database
    runtimeOnly fileTree(dir: 'libs', include: 'ojdbc8.jar')
    implementation("org.apache.tomcat:tomcat-jdbc:${apacheTomcatJdbcVersion}")

    //Flyway
    implementation("org.flywaydb:flyway-core:${flywayVersion}")
    implementation("org.flywaydb:flyway-database-postgresql:${flywayVersion}")


    //influx
    implementation("io.micrometer:micrometer-registry-influx:${micrometerInfluxRegistryVersion}")

    //Resilience4j for circuit breaker, retry, and timeout patterns
    implementation("io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-retry:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}")

    //Validation
    implementation("javax.validation:validation-api:${javaxValidationVersion}")

    //logstash
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}")

    //Used for transactional

    // added 7/16/2021
    //Security
    implementation("org.springframework.security:spring-security-web:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-config:${springSecurityVersion}")
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    implementation "javax.xml.bind:jaxb-api:${jaxbApiVersion}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"

    //
    //Graphics
    implementation("net.coobird:thumbnailator:${thumbnailatorVersion}")

    //Hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")

    //Jakarta
    compileOnly("jakarta.platform:jakarta.jakartaee-api:${jakartaVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackClassicVersion}")



    implementation("org.apache.logging.log4j:log4j-core:${apacheLoggingVersion}")

}




jooq {
    version = "${jooqVersion}"  // the default (can be omitted)
    edition = JooqEdition.OSS  // the default (can be omitted)
}

// Enable Gradle dependency locking for all configurations
dependencyLocking {
    lockAllConfigurations()
}

configurations.configureEach {
    resolutionStrategy.activateDependencyLocking()
}

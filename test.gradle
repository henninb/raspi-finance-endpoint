sourceSets {
    test {
        groovy.srcDir "src/test/unit/groovy"
        resources.srcDir "src/test/unit/resources"

        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    integrationTest {
        groovy.srcDir "src/test/integration/groovy"
        resources.srcDir "src/test/integration/resources"

        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    functionalTest {
        groovy.srcDir "src/test/functional/groovy"
        resources.srcDir "src/test/functional/resources" as String
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    performanceTest {
        groovy.srcDir "src/test/performance/groovy"
        resources.srcDir "src/test/performance/resources"
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    oracleTest {
        groovy.srcDir "src/test/oracle/groovy"
        resources.srcDir "src/test/oracle/resources"
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

//provide dependency scopes
configurations {
    // Align custom source sets with modern configurations (Gradle 7+)
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly

    performanceTestImplementation.extendsFrom testImplementation
    performanceTestRuntimeOnly.extendsFrom testRuntimeOnly

    oracleTestImplementation.extendsFrom testImplementation
    oracleTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// Kotlin toolchain is configured in build.gradle for all Kotlin compile tasks.

dependencies {
    testImplementation("org.apache.groovy:groovy:${groovyVersion}")
    testImplementation("org.apache.groovy:groovy-json:${groovyVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    // WebFlux for WebClient/WebTestClient in integration + functional tests only
    integrationTestImplementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    functionalTestImplementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    // RestClient support for selected test suites
    integrationTestImplementation("org.springframework.boot:spring-boot-starter-restclient:${springBootVersion}")
    functionalTestImplementation("org.springframework.boot:spring-boot-starter-restclient:${springBootVersion}")
    testImplementation("org.spockframework:spock-core:${spockFrameworkVersion}")
    testImplementation("org.spockframework:spock-spring:${spockFrameworkVersion}")
    testImplementation("org.testcontainers:spock:${testcontainersVersion}")
    testImplementation("io.github.http-builder-ng:http-builder-ng-core:${httpBuilderNgVersion}")
    testImplementation("com.squareup.retrofit2:retrofit:${squareRetrofitVersion}")
    testImplementation("com.squareup.retrofit2:retrofit-mock:${squareRetrofitVersion}")
    //h2 database
    runtimeOnly("com.h2database:h2:${h2DatabaseVersion}")
}

////provide dependency scopes
//configurations {
//    integrationTestImplementation.extendsFrom testImplementation
//    integrationTestRuntime.extendsFrom testRuntime
//    functionalTestCompile.extendsFrom testImplementation
//    testFunctionalCompile.extendsFrom testRuntime
//}

test {
    finalizedBy jacocoTestReport
    //useJUnitPlatform()
//    afterSuite { suite, result ->
//        result.exception?.printStackTrace()
//    }
}

//TODO: fix this issue
tasks.withType(Test) {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    environment "LOGS", "logs"
    environment "SPRING_PROFILES_ACTIVE", "unit"
    environment "APPNAME", "raspi-finance-endpoint"
}

task integrationTest(type: Test) {
    description = "Runs the integration tests."
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = project.sourceSets.integrationTest.runtimeClasspath

    environment "LOGS", "logs"
    environment "SPRING_PROFILES_ACTIVE", "int"
    environment "APPNAME", "raspi-finance-endpoint"

    // Gradle 9 compatibility
    useJUnitPlatform()

    // Performance optimizations
    maxParallelForks = Math.max(1, (Runtime.runtime.availableProcessors() / 2) as int)
    forkEvery = 0  // No forking per test class (reuse JVM)

    // JVM optimization for tests
    jvmArgs = [
        '-Xmx1024m',
        '-XX:+UseParallelGC',
        '-XX:MaxMetaspaceSize=512m',
        '-Djava.awt.headless=true'
    ]

    testLogging {
        events "failed", "skipped"
        exceptionFormat = "short"
        showStandardStreams = false
    }
}

task functionalTest(type: Test) {
    description = "Runs the functional tests."
    testClassesDirs = project.sourceSets.functionalTest.output.classesDirs
    classpath = project.sourceSets.functionalTest.runtimeClasspath

    environment "LOGS", "logs"
    environment "SPRING_PROFILES_ACTIVE", "func"
    environment "APPNAME", "raspi-finance-endpoint"

    // Gradle 9 compatibility
    useJUnitPlatform()
}

task performanceTest(type: Test) {
    description = "Runs the performance tests."
    testClassesDirs = project.sourceSets.performanceTest.output.classesDirs
    classpath = project.sourceSets.performanceTest.runtimeClasspath

    environment "LOGS", "logs"
    environment "SPRING_PROFILES_ACTIVE", "perf"
    environment "APPNAME", "raspi-finance-endpoint"

    // Gradle 9 compatibility
    useJUnitPlatform()
}

task oracleTest(type: Test) {
    description = "Runs the oracle tests."
    testClassesDirs = project.sourceSets.oracleTest.output.classesDirs
    classpath = project.sourceSets.oracleTest.runtimeClasspath

    environment "LOGS", "logs"
    environment "SPRING_PROFILES_ACTIVE", "ora"
    environment "APPNAME", "raspi-finance-endpoint"

    // Gradle 9 compatibility
    useJUnitPlatform()
}

// Use outputLocation and layout.buildDirectory instead of deprecated $buildDir for Gradle 9 readiness
integrationTest.reports.html.outputLocation.set(layout.buildDirectory.dir("reports/test/integration"))
functionalTest.reports.html.outputLocation.set(layout.buildDirectory.dir("reports/test/functional"))
performanceTest.reports.html.outputLocation.set(layout.buildDirectory.dir("reports/test/performance"))
oracleTest.reports.html.outputLocation.set(layout.buildDirectory.dir("reports/test/oracle"))
//test.dependsOn functionalTest
//test.dependsOn integrationTest

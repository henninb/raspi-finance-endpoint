#!/bin/bash

# Docker Security Validation Script
# This script validates that security hardening doesn't break functionality
# Supports both local and remote (SSH) Docker contexts

set -euo pipefail

echo "üîí Docker Security Validation Script"
echo "===================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Detect if we're running against a remote Docker host
REMOTE_MODE=false
if [[ "${DOCKER_HOST:-}" =~ ^ssh:// ]]; then
    REMOTE_MODE=true
    REMOTE_HOST=$(echo "$DOCKER_HOST" | sed 's|ssh://||')
    echo -e "${YELLOW}üåê Remote mode detected: validating Docker security on $REMOTE_HOST${NC}"
else
    echo -e "${YELLOW}üè† Local mode: validating Docker security on localhost${NC}"
fi

# Function to execute Docker commands (local or remote)
docker_exec() {
    if [ "$REMOTE_MODE" = true ]; then
        docker "$@"
    else
        docker "$@"
    fi
}

# Validation functions
validate_dockerfile() {
    echo -e "${YELLOW}üìã Validating Dockerfile security...${NC}"

    # Check if USER directive is uncommented
    if grep -q "^USER \${USERNAME}" Dockerfile; then
        echo -e "${GREEN}‚úÖ Non-root user enabled${NC}"
    else
        echo -e "${RED}‚ùå Application still running as root${NC}"
        return 1
    fi

    # Check for health check
    if grep -q "HEALTHCHECK" Dockerfile; then
        echo -e "${GREEN}‚úÖ Health check configured${NC}"
    else
        echo -e "${RED}‚ùå No health check found${NC}"
        return 1
    fi

    # Check for security optimizations
    if grep -q "UseContainerSupport" Dockerfile; then
        echo -e "${GREEN}‚úÖ Container-optimized JVM settings${NC}"
    else
        echo -e "${RED}‚ùå Missing container optimizations${NC}"
        return 1
    fi
}

validate_compose_security() {
    echo -e "${YELLOW}üìã Validating Docker Compose security...${NC}"

    local compose_file="$1"
    if [[ ! -f "$compose_file" ]]; then
        echo -e "${RED}‚ùå Compose file $compose_file not found${NC}"
        return 1
    fi

    # Check for localhost binding
    if grep -q "127.0.0.1:" "$compose_file"; then
        echo -e "${GREEN}‚úÖ Ports bound to localhost${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Ports may be exposed to all interfaces${NC}"
    fi

    # Check for resource limits
    if grep -q "resources:" "$compose_file"; then
        echo -e "${GREEN}‚úÖ Resource limits configured${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No resource limits found${NC}"
    fi

    # Check for security options
    if grep -q "security_opt:" "$compose_file"; then
        echo -e "${GREEN}‚úÖ Security options configured${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No security options found${NC}"
    fi

    # Check for capability dropping
    if grep -q "cap_drop:" "$compose_file"; then
        echo -e "${GREEN}‚úÖ Capabilities dropped${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Capabilities not restricted${NC}"
    fi
}

validate_dockerignore() {
    echo -e "${YELLOW}üìã Validating .dockerignore security...${NC}"

    # Check for sensitive file patterns
    local sensitive_patterns=("env.*" "*.key" "*.pem" ".git")

    for pattern in "${sensitive_patterns[@]}"; do
        if grep -q "$pattern" .dockerignore; then
            echo -e "${GREEN}‚úÖ $pattern excluded${NC}"
        else
            echo -e "${RED}‚ùå $pattern not excluded${NC}"
            return 1
        fi
    done
}

test_build() {
    echo -e "${YELLOW}üî® Testing Docker build...${NC}"

    # Test if the Dockerfile builds successfully
    if docker_exec build -t raspi-finance-test \
        --build-arg APP=raspi-finance-endpoint \
        --build-arg TIMEZONE=America/Chicago \
        --build-arg USERNAME=financeuser \
        --build-arg CURRENT_UID=1001 \
        --build-arg CURRENT_GID=1001 \
        . > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker build successful${NC}"

        # Clean up test image
        docker_exec rmi raspi-finance-test > /dev/null 2>&1 || true
    else
        echo -e "${RED}‚ùå Docker build failed${NC}"
        return 1
    fi
}

validate_remote_connectivity() {
    if [ "$REMOTE_MODE" = true ]; then
        echo -e "${YELLOW}üåê Testing remote Docker connectivity...${NC}"

        if docker_exec version > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Remote Docker connection successful${NC}"
        else
            echo -e "${RED}‚ùå Cannot connect to remote Docker daemon${NC}"
            return 1
        fi

        # Test Docker context accessibility
        if docker_exec info > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Remote Docker daemon accessible${NC}"
        else
            echo -e "${RED}‚ùå Remote Docker daemon not accessible${NC}"
            return 1
        fi
    fi
}

validate_compose_syntax() {
    echo -e "${YELLOW}üìã Validating Docker Compose syntax...${NC}"

    local compose_files=(
        "docker-compose-base.yml"
        "docker-compose-postgresql.yml"
        "docker-compose-nginx.yml"
        "docker-compose-influxdb.yml"
        "docker-compose-secure.yml"
        "docker-compose-gcp.yml"
    )

    for file in "${compose_files[@]}"; do
        if [[ -f "$file" ]]; then
            # Try modern docker compose first, fallback to docker-compose
            if command -v "docker" >/dev/null 2>&1 && docker_exec compose -f "$file" config > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ $file syntax valid${NC}"
            elif command -v "docker-compose" >/dev/null 2>&1 && docker-compose -f "$file" config > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ $file syntax valid${NC}"
            else
                # Manual YAML validation as fallback
                if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                    echo -e "${GREEN}‚úÖ $file YAML syntax valid${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Cannot validate $file (Docker compose not available)${NC}"
                fi
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $file not found (skipping)${NC}"
        fi
    done
}

security_summary() {
    echo -e "${YELLOW}üìä Security Improvements Summary${NC}"
    echo "================================="
    echo "‚úÖ Non-root user execution"
    echo "‚úÖ Resource limits and constraints"
    echo "‚úÖ Capability dropping (principle of least privilege)"
    echo "‚úÖ Network isolation (localhost binding)"
    echo "‚úÖ Read-only filesystems where possible"
    echo "‚úÖ Temporary filesystem restrictions"
    echo "‚úÖ Health checks for service monitoring"
    echo "‚úÖ Updated base images with security patches"
    echo "‚úÖ Comprehensive .dockerignore for build security"
    echo "‚úÖ Security-focused logging configuration"
    echo "‚úÖ Isolated custom networks"
    echo ""
    echo -e "${GREEN}üéâ Container security hardening completed successfully!${NC}"
}

# Main validation sequence
main() {
    echo "Starting security validation..."
    echo ""

    # Test remote connectivity first if in remote mode
    validate_remote_connectivity

    validate_dockerfile
    validate_dockerignore
    validate_compose_syntax

    # Test specific compose files
    for file in docker-compose-base.yml docker-compose-postgresql.yml docker-compose-nginx.yml docker-compose-influxdb.yml; do
        if [[ -f "$file" ]]; then
            validate_compose_security "$file"
        fi
    done

    test_build

    echo ""
    security_summary

    echo ""
    echo -e "${GREEN}üîí All security validations passed!${NC}"
    echo ""
    if [ "$REMOTE_MODE" = true ]; then
        echo "Remote Docker security validation completed for $REMOTE_HOST"
        echo "Next steps:"
        echo "1. Deploy with: DOCKER_HOST=$DOCKER_HOST docker compose -f docker-compose-secure.yml up -d"
        echo "2. Monitor logs: DOCKER_HOST=$DOCKER_HOST docker compose logs -f"
    else
        echo "Local Docker security validation completed"
        echo "Next steps:"
        echo "1. Review the new docker-compose-secure.yml for production use"
        echo "2. Update your environment files for InfluxDB 2.x (if using InfluxDB)"
        echo "3. Test the application with: docker-compose -f docker-compose-secure.yml up -d"
        echo "4. Monitor logs for any issues: docker-compose -f docker-compose-secure.yml logs -f"
    fi
}

# Run validation
main "$@"
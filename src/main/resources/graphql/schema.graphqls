scalar Long
scalar Date
scalar BigDecimal  
scalar Timestamp

enum AccountType {
    Credit
    Debit
    Undefined
}

enum TransactionState {
    Cleared
    Outstanding
    Future
    Undefined
}

enum ImageFormatType {
    Jpeg
    Png
    Undefined
}

enum ReoccurringType {
    Monthly
    Annually
    BiAnnually
    FortNightly
    Quarterly
    Onetime
    Undefined
}

enum TransactionType {
    Expense
    Income
    Transfer
    Undefined
}

type Query {
    descriptions : [Description]
    description (descriptionName: String!) : Description
    categories : [Category]
    category(categoryName: String!) : Category
    account(accountNameOwner: String!) : Account
    #    accounts(accountType: AccountType) : [Account]
    accounts : [Account]
    transactions(accountNameOwner: String!) : [Transaction]
    transaction(transactionId: Long!) : Transaction
    payments : [Payment]
    payment(paymentId: Long!) : Payment
    transfers : [Transfer]
    transfer(transferId: Long!) : Transfer
    parameters : [Parameter]
    parameter(parameterId: Long!) : Parameter
    validationAmounts : [ValidationAmount]
    validationAmount(validationId: Long!) : ValidationAmount
    receiptImages : [ReceiptImage]
    receiptImage(receiptImageId: Long!) : ReceiptImage
    #mutation: Mutation
}

type Mutation {
    createDescription( description: String) : Description
    createCategory( category: String) : Category
    createAccount( account: AccountInput ) : Account
    updateAccount( account: AccountInput ) : Account
    deleteAccount( accountId: Long! ) : Boolean
    createTransaction( transaction: TransactionInput ) : Transaction
    updateTransaction( transaction: TransactionInput ) : Transaction
    deleteTransaction( transactionId: Long! ) : Boolean
    createPayment( payment: PaymentInput ) : Payment
    deletePayment( paymentId: Long! ) : Boolean
    createTransfer( transfer: TransferInput ) : Transfer
    deleteTransfer( transferId: Long! ) : Boolean
    createParameter( parameter: ParameterInput ) : Parameter
    updateParameter( parameter: ParameterInput ) : Parameter
    deleteParameter( parameterId: Long! ) : Boolean
    createValidationAmount( validationAmount: ValidationAmountInput ) : ValidationAmount
    updateValidationAmount( validationAmount: ValidationAmountInput ) : ValidationAmount
    deleteValidationAmount( validationId: Long! ) : Boolean
}

# complete 7/17/2021
type Account {
    accountId: Long
    activeStatus: Boolean!
    accountNameOwner: String!
    accountType: AccountType!
    moniker: String
    outstanding: BigDecimal
    cleared: BigDecimal
    future: BigDecimal
    dateClosed: Timestamp
    validationDate: Timestamp
    dateAdded: Timestamp
    dateUpdated: Timestamp
}

# complete 7/17/2021
type Category {
    categoryId: Long
    activeStatus: Boolean!
    categoryName: String!
    categoryCount: Long
    dateAdded: Timestamp
    dateUpdated: Timestamp
}

# complete 7/17/2021
type Description {
    descriptionId: Long
    activeStatus: Boolean!
    descriptionName: String!
    descriptionCount: Long
    dateAdded: Timestamp
    dateUpdated: Timestamp
}

# complete 7/17/2021
type Transaction {
    transactionId: Long
    guid: String!
    accountId: Long
    accountType: AccountType!
    transactionType: TransactionType!
    activeStatus: Boolean!
    transactionDate: Date!
    accountNameOwner: String!
    description: String!
    category: String!
    amount: BigDecimal!
    transactionState: TransactionState!
    reoccurringType: ReoccurringType!
    notes: String!
    dueDate: Date
    receiptImageId: Long
    receiptImage: ReceiptImage
    dateAdded: Timestamp
    dateUpdated: Timestamp
}

# complete 7/17/2021
type Payment {
    paymentId: Long
    sourceAccount: String!
    destinationAccount: String!
    activeStatus: Boolean!
    transactionDate: Date!
    amount: BigDecimal!
    guidSource: String
    guidDestination: String
    dateAdded: Timestamp
    dateUpdated: Timestamp
}

input PaymentInput {
    paymentId: Long
    sourceAccount: String!
    destinationAccount: String!
    transactionDate: Date!
    amount: BigDecimal!
    activeStatus: Boolean
}

# complete 7/17/2021
type Transfer {
    transferId: Long
    sourceAccount: String!
    destinationAccount: String!
    transactionDate: Date!
    amount: BigDecimal!
    guidSource: String
    guidDestination: String
    activeStatus: Boolean!
    dateAdded: Timestamp
    dateUpdated: Timestamp
}

input TransferInput {
    sourceAccount: String!
    destinationAccount: String!
    transactionDate: Date!
    amount: BigDecimal!
    activeStatus: Boolean
}

input AccountInput {
    accountId: Long
    accountNameOwner: String!
    accountType: AccountType!
    activeStatus: Boolean
    moniker: String
    outstanding: BigDecimal
    cleared: BigDecimal
    future: BigDecimal
    dateClosed: Timestamp
    validationDate: Timestamp
}

input TransactionInput {
    transactionId: Long
    guid: String
    accountId: Long
    accountType: AccountType!
    transactionType: TransactionType!
    accountNameOwner: String!
    transactionDate: Date!
    description: String!
    category: String!
    amount: BigDecimal!
    transactionState: TransactionState!
    activeStatus: Boolean
    reoccurringType: ReoccurringType
    notes: String
    dueDate: Date
    receiptImageId: Long
}

input ParameterInput {
    parameterId: Long
    parameterName: String!
    parameterValue: String!
    activeStatus: Boolean
}

input ValidationAmountInput {
    validationId: Long
    accountId: Long!
    validationDate: Timestamp!
    activeStatus: Boolean
    transactionState: TransactionState!
    amount: BigDecimal!
}

type ReceiptImage {
    receiptImageId: Long
    transactionId: Long
    activeStatus: Boolean!
    imageFormatType: ImageFormatType!
    image: String!
    thumbnail: String!
}

# complete 7/17/2021
type Parameter {
    parameterId: Long
    parameterName: String!
    parameterValue: String!
    activeStatus: Boolean!
}

# complete 7/17/2021
type ValidationAmount {
    validationId: Long
    accountId: Long
    validationDate: Timestamp!
    activeStatus: Boolean!
    transactionState: TransactionState!
    amount: BigDecimal!
}

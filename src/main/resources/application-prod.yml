server:
  address: 0.0.0.0
  http2:
    enable: true
  tomcat:
    connection-timeout: 10s
  port: ${SERVER_PORT}
  ssl:
    key-store: classpath:hornsup-raspi-finance-keystore.p12
    key-store-password: ${SSL_KEY_STORE_PASSWORD}
    key-store-type: pkcs12
    key-alias: hornsup
    key-password: ${SSL_KEY_PASSWORD}
    enabled: ${SSL_ENABLED}
    enabled-protocols: TLSv1.2
spring:
  graphql:
    path: /graphql
  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: http://localhost:8443/auth/realms/finance
#          jwk-set-uri: http://localhost:8443/auth/realms/finance/protocol/openid-connect/certs
    user:
      name: ${BASIC_AUTH_USERNAME}
      password: ${BASIC_AUTH_PASSWORD}
  application:
    name: raspi-finance-endpoint
  #  profiles:
  #    active: ${SPRING_PROFILES_ACTIVE}

  # ===============================
  # = Jackson Settings
  # ===============================
  jackson:
    property-naming-strategy: LOWER_CAMEL_CASE
    default-property-inclusion: non_null
    mapper.accept-case-insensitive-enums: true
    time-zone: America/Chicago
  # ===============================
  # = DATA SOURCE
  # ===============================
  datasource:
    url: ${DATASOURCE}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: ${DATASOURCE_DRIVER}
    hikari:
      auto-commit: false
      schema: public
      # Connection pool settings for resilience
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1800000
      # Query timeout in milliseconds (30 seconds)
      query-timeout: 30000
      # Connection validation
      connection-test-query: SELECT 1
      validation-timeout: 5000
      # Pool monitoring
      register-mbeans: true
      # Connection leak detection (in milliseconds)
      leak-detection-threshold: 60000
      # Driver-level properties
      data-source-properties:
        # PostgreSQL specific
        socketTimeout: 30
        loginTimeout: 10
        connectTimeout: 10
        # Statement timeout (in seconds)
        statementTimeout: 30
        # Enable prepared statement caching
        preparedStatementCacheQueries: 256
        preparedStatementCacheSizeMiB: 5
  sql:
    init:
      continue-on-error: false
      mode: never
  # ===============================
  # = JPA / HIBERNATE
  # ===============================
  # Show or not log for each sql query
  jpa:
    show-sql: false
    open-in-view: false
    generate-ddl: true
    hibernate:
      ddl-auto: ${HIBERNATE_DDL}
    properties:
      hibernate:
        # Query timeout for Hibernate queries (in milliseconds)
        query.timeout: 30000
        # Connection provider settings
        connection.provider_disables_autocommit: true
        # JDBC batch settings
        jdbc:
          batch_size: 20
          batch_versioned_data: true
          time_zone: UTC
        # Query plan cache
        query.plan_cache_max_size: 2048
        query.plan_parameter_metadata_max_size: 128
  #    properties:
  #      hibernate:
  #        jdbc:
  #          time_zone: UTC

  # ===============================
  # = Flyway
  # ===============================
  flyway:
    enabled: ${FLYWAY_ENABLED}
    user: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    url: ${DATASOURCE}
    baseline-on-migrate: true
    baseline-version: 0
    #    schemas: prod
    locations: classpath:db/migration/prod
    validate-on-migrate: true
  # CORs
#  mvc:
#    dispatch-options-request: true
# ===============================
# = Custom
# ===============================
custom:
  project:
    jwt:
      key: ${JWT_KEY}
    allowed:
      origins:
        - https://hornsup:3000
        - https://localhost:3000
        - https://finance.lan
        - https://www.bhenning.com
        - https://www.brianhenning.com
        - https://vercel.bhenning.com
        - https://vercel.brianhenning.com
        - https://pages.brianhenning.com
        - https://pages.bhenning.com
        - https://amplify.bhenning.com
        - https://amplify.brianhenning.com
        - https://netlify.bhenning.com
        - https://netlify.brianhenning.com
    excluded-accounts:
      - test_brian
  security:
    rate-limit:
      enabled: true
      # Allow override via env var RATE_LIMIT_RPM; default to 5000
      requests-per-minute: ${RATE_LIMIT_RPM:5000}
      window-size-minutes: 1

# ===============================
# = Logging
# ===============================
# logging:
#   config: classpath:logback-prod.groovy
#  logstash:
#    enabled: true
#    url: 192.168.99.100:5000

#spring.jpa.hibernate.ddl-auto: none
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#none is build from schema.sql (no Java classes)
#update only add new tables in the schema.sql (starting from Java classes)

#kebab-case '-' separated

# ===============================
# = Health and Metrics
# ===============================

#management.metrics.export.influx:
#  bucket: metrics # Specifies the destination bucket for writes
#  org: hornsup # Specifies the destination organization for writes.
#  token: my-super-secret-auth-token # Authenticate requests with this token.
#  uri: http://finance-db.lan:8086/api/v2 # The URI for the Influx backend. (Default: http://localhost:8086/api/v2)
#  compressed: true # Whether to enable GZIP compression of metrics batches published to Influx. (Default: true)
#  enabled: true # Whether exporting of metrics to this backend is enabled. (Default: true)


# ===============================
# = Management and Metrics
# ===============================
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    export:
      # InfluxDB 2.x native configuration (modern approach)
      influx:
        enabled: ${INFLUXDB_ENABLED}              # Enable/disable InfluxDB metrics export
        api-version: v2                           # Use InfluxDB 2.x native API (not 1.x compatibility)
        uri: ${INFLUXDB_URL}                      # InfluxDB 2.x endpoint
        bucket: ${INFLUXDB_BUCKET}                # InfluxDB 2.x bucket name
        org: ${INFLUXDB_ORG}                      # InfluxDB 2.x organization
        token: ${INFLUXDB_TOKEN}                  # InfluxDB 2.x authentication token
        compressed: true                          # Enable GZIP compression for metrics batches
        step: 1m                                  # How often to publish metrics (1 minute)
        connect-timeout: 10s                      # Connection timeout
        read-timeout: 30s                         # Read timeout
debug: false

# Circuit breaker and resilience patterns
resilience4j:
  circuitbreaker:
    instances:
      database:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 60000ms
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 30000ms
  retry:
    instances:
      database:
        max-attempts: 3
        wait-duration: 1000ms
        retry-exceptions:
          - java.sql.SQLException
          - org.springframework.dao.DataAccessResourceFailureException
          - org.springframework.jdbc.CannotGetJdbcConnectionException
        ignore-exceptions:
          - jakarta.validation.ValidationException
          - java.lang.IllegalArgumentException
  timelimiter:
    instances:
      database:
        timeout-duration: 30000ms
        cancel-running-future: true
